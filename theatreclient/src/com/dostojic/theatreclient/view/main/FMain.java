/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dostojic.theatreclient.view.main;

import com.dostojic.theatreclient.view.artist.FArtist;
import com.dostojic.theatreclient.view.performance.PInsertPerformance;
import com.dostojic.theatreclient.view.play.PInsertPlay;
import com.dostojic.theatreclient.view.play.PListPlays;
import com.dostojic.theatreclient.view.play.PPlay;
import com.dostojic.theatreclient.view.stage.PInsertStage;
import com.dostojic.theatreclient.view.ticket.PInsertTicket;
import java.awt.CardLayout;
import java.awt.Panel;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JPanel;


/**
 *
 * @author dejan
 */
public class FMain extends javax.swing.JFrame {
    
    public enum Panels {

        P_PLAY("ONE"),
        P_PERFORMANCE("TWO");

        /**
         * @param text
         */
        private Panels(final String text) {
            this.text = text;
        }
        private final String text;

        /* (non-Javadoc)
         * @see java.lang.Enum#toString()
         */
        @Override
        public String toString() {
            return text;
        }
    }

    String P_PLAY="play";
    String P_PERFORMANCE = "performance";
    
    PInsertPlay pInsertPlay;
    PListPlays pListPlays;
    PPlay pPlay;
    JPanel current;
    Map<String,Panel> panels = new HashMap<String, Panel>();
    List<String> panelNames = new LinkedList<String>();
    
    /**
     * Creates new form FMain
     */
    private FMain() {
        initComponents();
        setGreetings();
        addPanels();
        this.setExtendedState( javax.swing.JFrame.MAXIMIZED_BOTH );
    }
    
    private static FMain instance;
    
    public static FMain getInstance(){
        if (instance == null){
            instance = new FMain();
        }
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pCard = new javax.swing.JPanel();
        menu = new javax.swing.JMenuBar();
        menuPlay = new javax.swing.JMenu();
        menuItemPlay = new javax.swing.JMenuItem();
        menuItemPlayList = new javax.swing.JMenuItem();
        menuArtist = new javax.swing.JMenu();
        menuItemArtist = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        menuScenaTest = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuItemInsertPerformance = new javax.swing.JMenuItem();
        menuTicket = new javax.swing.JMenu();
        menuItemTicket = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());

        pCard.setLayout(new java.awt.CardLayout());
        getContentPane().add(pCard, "card2");

        menuPlay.setText("Predstava");

        menuItemPlay.setText("Nova");
        menuItemPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPlayActionPerformed(evt);
            }
        });
        menuPlay.add(menuItemPlay);

        menuItemPlayList.setText("Sve");
        menuItemPlayList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPlayListActionPerformed(evt);
            }
        });
        menuPlay.add(menuItemPlayList);

        menu.add(menuPlay);

        menuArtist.setText("Umetnik");

        menuItemArtist.setText("Novi umetnik");
        menuItemArtist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemArtistActionPerformed(evt);
            }
        });
        menuArtist.add(menuItemArtist);

        menu.add(menuArtist);

        jMenu1.setText("Scena");

        menuScenaTest.setText("Test");
        menuScenaTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuScenaTestActionPerformed(evt);
            }
        });
        jMenu1.add(menuScenaTest);

        menu.add(jMenu1);

        jMenu2.setText("Izvodjenje");

        menuItemInsertPerformance.setText("Unesi");
        menuItemInsertPerformance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemInsertPerformanceActionPerformed(evt);
            }
        });
        jMenu2.add(menuItemInsertPerformance);

        menu.add(jMenu2);

        menuTicket.setText("Karta");

        menuItemTicket.setText("Unesi");
        menuItemTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemTicketActionPerformed(evt);
            }
        });
        menuTicket.add(menuItemTicket);

        menu.add(menuTicket);

        setJMenuBar(menu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemPlayActionPerformed
//        tabbedPane.setSelectedIndex(0);
        selectPanel(Panels.P_PLAY);
    }//GEN-LAST:event_menuItemPlayActionPerformed

    private void menuItemArtistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemArtistActionPerformed
        FArtist.getInstance().setVisible(true);
    }//GEN-LAST:event_menuItemArtistActionPerformed

    private void menuItemPlayListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemPlayListActionPerformed
//        tabbedPane.setSelectedIndex(1);
    }//GEN-LAST:event_menuItemPlayListActionPerformed

    private void menuScenaTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuScenaTestActionPerformed
        //        pCard.removeAll();
        //        pCard.add(new PInsertStage());
        PInsertStage pInsertSeats = new PInsertStage(); 
        pInsertSeats.setVisible(true);
        JDialog d = new JDialog(this, true);
        d.add(pInsertSeats);
        d.pack();
        d.setVisible(true);
    }//GEN-LAST:event_menuScenaTestActionPerformed

    private void menuItemInsertPerformanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemInsertPerformanceActionPerformed
//        selectPanel(Panels.P_PERFORMANCE);
        JDialog dialog = new JDialog(this,"Ubaci izvoÄ‘enje",true);
        PInsertPerformance panel = new PInsertPerformance();
        panel.setVisible(true);
        dialog.add(panel);
        dialog.pack();
        dialog.setVisible(true);
    }//GEN-LAST:event_menuItemInsertPerformanceActionPerformed

    private void menuItemTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemTicketActionPerformed
        JDialog dialog = new JDialog(this,"Unesi kartu",true);
        PInsertTicket panel = new PInsertTicket();
        panel.setVisible(true);
        dialog.add(panel);
        dialog.pack();
        dialog.setVisible(true);
    }//GEN-LAST:event_menuItemTicketActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FMain().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar menu;
    private javax.swing.JMenu menuArtist;
    private javax.swing.JMenuItem menuItemArtist;
    private javax.swing.JMenuItem menuItemInsertPerformance;
    private javax.swing.JMenuItem menuItemPlay;
    private javax.swing.JMenuItem menuItemPlayList;
    private javax.swing.JMenuItem menuItemTicket;
    private javax.swing.JMenu menuPlay;
    private javax.swing.JMenuItem menuScenaTest;
    private javax.swing.JMenu menuTicket;
    private javax.swing.JPanel pCard;
    // End of variables declaration//GEN-END:variables

    
    private void setGreetings(){
//        lGreeting.setText(lGreeting.getText() + ": " + user.getFirstName() + " " + user.getLastName());
    }
    
    private void addPanels(){
        pPlay = new PPlay();
        pPlay.setVisible(true);
        pCard.add(pPlay,P_PLAY);
        panelNames.add(P_PLAY);
    }
    
    private void selectPanel(Panels panelName){
        if (!panelNames.contains(panelName.name())){
            if (panelName == Panels.P_PERFORMANCE){
                PInsertPerformance pip = new PInsertPerformance();
                pip.setVisible(true);
                pip.method();
                pCard.add(pip,Panels.P_PERFORMANCE.name());
            }else if (panelName == Panels.P_PLAY){
                if (pPlay == null){
                    pPlay = new PPlay();
                }
                pCard.add(pPlay, Panels.P_PLAY.name());
            }
        }
        CardLayout cl = (CardLayout) pCard.getLayout();
        cl.show(pCard, panelName.name());
    }
}
